import{_ as e,c as s,a1 as i,o as t}from"./chunks/framework.CiOUwjDc.js";const c=JSON.parse('{"title":"커널 파일","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"reference/kernel-packaging-kernel.md","filePath":"ko/reference/kernel-packaging-kernel.md","lastUpdated":1745371375000}'),l={name:"reference/kernel-packaging-kernel.md"};function n(r,a,o,d,h,p){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="커널-파일" tabindex="-1">커널 파일 <a class="header-anchor" href="#커널-파일" aria-label="Permalink to &quot;커널 파일&quot;">​</a></h1><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>학습 커널은 docker image 를 save 한 파일(.tar) 또는 docker build 할 수 있는 소스 코드를 압축한 zip 파일로 생성할 수 있습니다. 정해진 규칙에 따라 패키징해야 플랫폼에 정상적으로 업로드 할 수 있습니다.</p><h2 id="패키징" tabindex="-1">패키징 <a class="header-anchor" href="#패키징" aria-label="Permalink to &quot;패키징&quot;">​</a></h2><h3 id="소스-코드-직접-압축" tabindex="-1">소스 코드 직접 압축 <a class="header-anchor" href="#소스-코드-직접-압축" aria-label="Permalink to &quot;소스 코드 직접 압축&quot;">​</a></h3><p>커널 소스와 Root 폴더에 Dockerfile 이 들어있는 압축 파일(zip)을 생성합니다.</p><div class="warning custom-block"><p class="custom-block-title">주의사항</p><p>Dockerfile이 docker image를 빌드하는데 필요한 모든 파일은 압출 파일 안에 포함되어 있어야 합니다. 이것은 base / build kernel 둘 다 동일합니다.</p></div><h3 id="docker-image-저장" tabindex="-1">docker image 저장 <a class="header-anchor" href="#docker-image-저장" aria-label="Permalink to &quot;docker image 저장&quot;">​</a></h3><p>docker 명령을 통해 이미지를 생성하고 해당 이미지를 파일로 save 합니다.</p><p>예) 해당 폴더내 dockerfile 을 빌드하여 model-1 tag로 이미지를 생성합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> model-1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>예) model-1 이미지를 model.tar 파일로 save 합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker save -o 이미지명.tar 이미지명</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> save</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> model.tar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> model-1</span></span></code></pre></div>`,13)]))}const g=e(l,[["render",n]]);export{c as __pageData,g as default};
