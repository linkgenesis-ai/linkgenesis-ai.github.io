import{_ as s,c as n,a1 as e,o as t}from"./chunks/framework.CiOUwjDc.js";const u=JSON.parse('{"title":"검증 결과","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"reference/kernel-if-validation-end-result.md","filePath":"ko/reference/kernel-if-validation-end-result.md","lastUpdated":1745371375000}'),p={name:"reference/kernel-if-validation-end-result.md"};function i(l,a,o,c,d,r){return t(),n("div",null,a[0]||(a[0]=[e(`<h1 id="검증-결과" tabindex="-1">검증 결과 <a class="header-anchor" href="#검증-결과" aria-label="Permalink to &quot;검증 결과&quot;">​</a></h1><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>지정된 위치에 저장된 검증 결과는 플랫폼을 통해 관리되고 다양한 기능을 사용할 수 있습니다.</p><ul><li>결과 분석</li><li>재학습 데이터로 활용</li></ul><p>검증 결과를 플랫폼에서 확인하려면 지정된 위치에 결과를 저장해야 합니다.</p><h2 id="결과-저장-위치" tabindex="-1">결과 저장 위치 <a class="header-anchor" href="#결과-저장-위치" aria-label="Permalink to &quot;결과 저장 위치&quot;">​</a></h2><ul><li><p>어노테이션 정보, 리포트</p><p>학습 설정 파일의 <code>model_write_path</code> 에 저장해야 합니다.<br> 해당 경로에 규칙에 맞춰 결과를 생성하면 플랫폼내에서 결과를 확인할 수 있습니다.</p></li><li><p>이미지</p><p>검증결과로 이미지가 생성되는 경우 학습 설정 파일의 <code>image_write_path</code> 에 저장해야 합니다.</p></li></ul><h2 id="리포트-결과물" tabindex="-1">리포트 결과물 <a class="header-anchor" href="#리포트-결과물" aria-label="Permalink to &quot;리포트 결과물&quot;">​</a></h2><p>결과 저장 위치 루트에 CSV 파일을 생성하면 플랫폼 화면에 테이블로 표시됩니다.</p><p>테이블이 표시되는 순서는 <code>summary.csv</code>, <code>confusion.csv</code> 가 최 상단에 표시되고, 나머지는 파일명의 abc 순으로 표시됩니다.</p><p>테이블로 표시하기에는 너무 많은 데이터가 검증 결과로 생성되는 경우에는 서브 폴더를 만들어서 넣어두면 해당 파일들은 다운로드를 통해 확인할 수 있습니다.</p><h2 id="이미지-결과물" tabindex="-1">이미지 결과물 <a class="header-anchor" href="#이미지-결과물" aria-label="Permalink to &quot;이미지 결과물&quot;">​</a></h2><p>검증결과로 이미지가 생성되는 경우 <code>image_write_path</code> 에 저장하고 <code>model_write_path/files.txt</code> 파일에 이미지 매핑 정보를 제공해야 합니다.</p><p>다음은 <code>model_write_path/files.txt</code> 예시입니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cat files.txt </span></span>
<span class="line"><span>[</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    &quot;src&quot;: &quot;/mnt/image/NAS01/image/1/2/L_VALVE_1/2024/1227/01/S5421E45626133463036_THERMOSTATIC_VALVE_L_0_A.png&quot;,</span></span>
<span class="line"><span>    &quot;dst&quot;: &quot;/mnt/validation/output_image/NAS01/image/1/2/L_VALVE_1/2024/1227/01/S5421E45626133463036_THERMOSTATIC_VALVE_L_0_A.png&quot;</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>  {</span></span>
<span class="line"><span>    &quot;src&quot;: &quot;/mnt/image/NAS01/image/1/2/L_VALVE_1/2024/1227/01/S5421E45626133463036_THERMOSTATIC_VALVE_R_0_A.png&quot;,</span></span>
<span class="line"><span>    &quot;dst&quot;: &quot;/mnt/validation/output_image/NAS01/image/1/2/L_VALVE_1/2024/1227/01/S5421E45626133463036_THERMOSTATIC_VALVE_R_0_A.png&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>]</span></span></code></pre></div><h2 id="동작-타입별-구분" tabindex="-1">동작 타입별 구분 <a class="header-anchor" href="#동작-타입별-구분" aria-label="Permalink to &quot;동작 타입별 구분&quot;">​</a></h2><p>검증 동작은 <code>validation</code>, <code>inference</code>, <code>preprocessing</code> 으로 구분됩니다.</p><ul><li>validation : 학습된 모델을 검증하기 위해 사용되며 다양한 리포트 데이터를 결과로 제공할 수 있습니다.</li><li>inference : 학습된 모델을 통해 새로운 어노테이션을 생성합니다. (auto labeling 기능)</li><li>preprocessing : 전달된 이미지를 전처리할 수 있습니다.</li></ul><h3 id="input-output" tabindex="-1">Input / Output <a class="header-anchor" href="#input-output" aria-label="Permalink to &quot;Input / Output&quot;">​</a></h3><table tabindex="0"><thead><tr><th>operation</th><th>커널에 전달되는 데이터</th><th>커널에서 생성하는 데이터</th></tr></thead><tbody><tr><td>validation</td><td>annotaion files</td><td>annotaion files, csv files, image files(옵션)</td></tr><tr><td>inference</td><td>files.txt(라인으로 구분된 이미지 경로)</td><td>annotaion files</td></tr><tr><td>preprocessing</td><td>files.txt(라인으로 구분된 이미지 경로)</td><td>image files</td></tr></tbody></table><h3 id="커널-결과로-생성되는-데이터셋의-데이터" tabindex="-1">커널 결과로 생성되는 데이터셋의 데이터 <a class="header-anchor" href="#커널-결과로-생성되는-데이터셋의-데이터" aria-label="Permalink to &quot;커널 결과로 생성되는 데이터셋의 데이터&quot;">​</a></h3><table tabindex="0"><thead><tr><th>operation</th><th>이미지</th><th>어노테이션</th></tr></thead><tbody><tr><td>validation</td><td>원본 이미지, 커널에서 이미지를 생성했으면 생성 이미지 사용</td><td>원본 어노테이션 + 결과 어노테이션</td></tr><tr><td>inference</td><td>원본 이미지</td><td>결과 어노테이션</td></tr><tr><td>preprocessing</td><td>생성 이미지</td><td>없음</td></tr></tbody></table><h2 id="학습-타입별-구분" tabindex="-1">학습 타입별 구분 <a class="header-anchor" href="#학습-타입별-구분" aria-label="Permalink to &quot;학습 타입별 구분&quot;">​</a></h2><p>검증 결과는 <code>training type</code> 에 따라 다른 결과를 가지는데, 각 타입별 필수적인 결과물은 아래와 같습니다.</p><h3 id="classification-cl" tabindex="-1">Classification (CL) <a class="header-anchor" href="#classification-cl" aria-label="Permalink to &quot;Classification (CL)&quot;">​</a></h3><p><code>detections.csv</code>, <code>confusion.csv</code> 파일을 필수로 제공해야 합니다.</p><ul><li><p>detections.csv</p><p>위치 : model_write_path/detections.csv</p><p>해당 파일은 label로 변환되어 각 image가 어떻게 분류되었는지 ui에서 확인하는 용도 입니다. Format은 아래와 같습니다.</p><div class="info custom-block"><p class="custom-block-title">detections.csv</p><ul><li>filename : 해당 image에 대한 경로</li><li>y : 실제 이미지 분류(ground truth)</li><li>y_pred : 예측 분류</li><li>p(n) : 각각의 클래스에 속할 확률에 대한 score 값</li></ul></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>filename,y,y_pred,p0,p1,p2,p3,p4</span></span>
<span class="line"><span>/Train_ImageSet/daisy/20703737132_179560d0fb.jpg,0,0,0.3533,0.2900,0.0876,0.1959,0.0732</span></span>
<span class="line"><span>/Train_ImageSet/dandelion/501987276_744448580c_m.jpg,1,1,0.1936,0.2889,0.1641,0.2335,0.1198</span></span>
<span class="line"><span>/Train_ImageSet/roses/12238827553_cf427bfd51_n.jpg,2,2,0.1405,0.1607,0.3666,0.1494,0.1829</span></span>
<span class="line"><span>/Train_ImageSet/sunflowers/14460081668_eda8795693_m.png,3,3,0.1184,0.1356,0.1101,0.4027,0.2334</span></span>
<span class="line"><span>/Train_ImageSet/tulips/450607536_4fd9f5d17c_m.bmp,4,4,0.1758,0.1025,0.1779,0.1855,0.3583</span></span>
<span class="line"><span>/Test_ImageSet/daisy_2473825306_62fd5f8785_n.jpg,0,0,0.3769,0.1887,0.1223,0.2088,0.1034</span></span>
<span class="line"><span>/Test_ImageSet/dandelion_17649230811_9bdbbacb8c.jpg,1,1,0.1595,0.4717,0.1265,0.1422,0.1001</span></span>
<span class="line"><span>/Test_ImageSet/roses_16258946661_f9739cdc0a.jpg,2,2,0.1501,0.0963,0.2900,0.1872,0.2763</span></span>
<span class="line"><span>/Test_ImageSet/sunflowers_2767688889_b176b0c3fb.jpg,3,3,0.2360,0.2268,0.1401,0.2678,0.1293</span></span>
<span class="line"><span>/Test_ImageSet/tulips_8603340662_0779bd87fd.jpg,4,4,0.1498,0.0829,0.3246,0.1018,0.3409</span></span></code></pre></div></li><li><p>confusion.csv</p><p>위치 : model_write_path/confusion.csv</p><p>해당 파일은 detection 결과에서 y, y_pred에 해당하는 파일 개수를 matrix형태로 정리한 파일입니다.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0,1,2,3,4,name</span></span>
<span class="line"><span>2,0,0,0,0,daisy</span></span>
<span class="line"><span>0,2,0,0,0,dandelion</span></span>
<span class="line"><span>0,0,2,0,0,roses</span></span>
<span class="line"><span>0,0,0,2,0,sunflowers</span></span>
<span class="line"><span>0,0,0,0,2,tulips</span></span></code></pre></div></li></ul><h3 id="regional-classification-rc" tabindex="-1">Regional Classification (RC) <a class="header-anchor" href="#regional-classification-rc" aria-label="Permalink to &quot;Regional Classification (RC)&quot;">​</a></h3><p><code>detections.csv</code> 에 <code>영역 정보(x,y,w,h)</code> 가 추가된다는 것을 제외하면 CL (Classification)과 동일하며 <code>detections.csv</code> 만 필수 결과 파일로 제공하면 됩니다.</p><p>detections.csv 예시</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>filename,y,y_pred,p0,p1,p2,p3,p4,x,y,w,h</span></span>
<span class="line"><span>/Train_ImageSet/daisy/20703737132_1790d0fb.jpg,0,0,0.3533,0.2900,0.0876,0.1959,0.0732,12,23,50,30</span></span>
<span class="line"><span>/Train_ImageSet/daisy/20703737132_1760d1fb.jpg,0,0,0.2533,0.6800,0.0266,0.2659,0.0331,22,43,60,20</span></span></code></pre></div><h3 id="segmentation-seg-object-detection-od" tabindex="-1">Segmentation (SEG), Object Detection (OD) <a class="header-anchor" href="#segmentation-seg-object-detection-od" aria-label="Permalink to &quot;Segmentation (SEG), Object Detection (OD)&quot;">​</a></h3><p><code>model_write_path/annotations/</code> 폴더에 <code>labelme format</code>의 segmentation 또는 detection 결과 파일을 필수로 제공해야 합니다. 이 파일들은 플랫폼에서 label로 변환되어 화면에서 확인을 하는데 사용된다.</p><p>그리고 <code>summay.csv</code> 를 필수로 제공해야 합니다. summay.csv 에 강제하는 내용은 없지만, 어떤 형태로든 검증 결과가 요약 되어 있어야 합니다.</p><p>그외 각종 다양한 metirc을 csv 형태로 저장하는 것을 권장하며 생성된 모든 csv 파일은 검증 결과 화면에 테이블 형태로 표시 됩니다.</p><p>report.csv 예시</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>num detections,21</span></span>
<span class="line"><span>num classes,42</span></span>
<span class="line"><span>num files,7</span></span>
<span class="line"><span>mean elapsed,</span></span>
<span class="line"><span>mAP,0.1255555510520935</span></span>
<span class="line"><span>wmAP,0.11481481616695723</span></span>
<span class="line"><span>ref_IoU,0.5</span></span>
<span class="line"><span>min_score,0.05</span></span>
<span class="line"><span>GT,30</span></span>
<span class="line"><span>TP,3</span></span>
<span class="line"><span>FP,7</span></span>
<span class="line"><span>FN,27</span></span>
<span class="line"><span>PREC,0.3</span></span>
<span class="line"><span>RECL,0.1</span></span>
<span class="line"><span>~ACC,0.08108108108108109</span></span></code></pre></div>`,37)]))}const m=s(p,[["render",i]]);export{u as __pageData,m as default};
